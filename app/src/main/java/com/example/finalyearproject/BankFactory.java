package com.example.finalyearproject;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class BankFactory extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50611c1e806100206000396000f3fe608060405260043610620000505760003560e01c80632c80cd1d1462000055578063714e1bc71462000099578063b29b73f714620000b9578063b4ff1c1314620000fd578063ea0d1b461462000141575b600080fd5b3480156200006257600080fd5b506200008160048036038101906200007b919062000857565b6200016f565b604051620000909190620008ed565b60405180910390f35b620000b76004803603810190620000b1919062000980565b62000230565b005b348015620000c657600080fd5b50620000e56004803603810190620000df919062000857565b62000444565b604051620000f4919062000a16565b60405180910390f35b3480156200010a57600080fd5b5062000129600480360381019062000123919062000a64565b62000576565b60405162000138919062000b01565b60405180910390f35b3480156200014e57600080fd5b506200016d600480360381019062000167919062000857565b620005b6565b005b60008060018360405162000184919062000b97565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000227576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021e9062000c11565b60405180910390fd5b80915050919050565b60008383836040516200024390620006d3565b620002519392919062000c85565b604051809103906000f0801580156200026e573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663a26759cb346040518263ffffffff1660e01b81526004016000604051808303818588803b158015620002ba57600080fd5b505af1158015620002cf573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff1663a99ba95c836040518263ffffffff1660e01b81526004016200030f919062000cc9565b600060405180830381600087803b1580156200032a57600080fd5b505af11580156200033f573d6000803e3d6000fd5b505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600183604051620003b9919062000b97565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f7646582a38471c5eaa1f8b89e3c40d6296c0bc85a30adee4cf5b30a803bc96ba81604051620004369190620008ed565b60405180910390a150505050565b60008060018360405162000459919062000b97565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620004fc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004f39062000c11565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16634cb14f126040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000548573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200056e919062000d04565b915050919050565b600081815481106200058757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600182604051620005ca919062000b97565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200066d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006649062000c11565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638d68cf596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620006b657600080fd5b505af1158015620006cb573d6000803e3d6000fd5b505050505050565b610eb28062000d3783390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200074a82620006ff565b810181811067ffffffffffffffff821117156200076c576200076b62000710565b5b80604052505050565b600062000781620006e1565b90506200078f82826200073f565b919050565b600067ffffffffffffffff821115620007b257620007b162000710565b5b620007bd82620006ff565b9050602081019050919050565b82818337600083830152505050565b6000620007f0620007ea8462000794565b62000775565b9050828152602081018484840111156200080f576200080e620006fa565b5b6200081c848285620007ca565b509392505050565b600082601f8301126200083c576200083b620006f5565b5b81356200084e848260208601620007d9565b91505092915050565b60006020828403121562000870576200086f620006eb565b5b600082013567ffffffffffffffff811115620008915762000890620006f0565b5b6200089f8482850162000824565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008d582620008a8565b9050919050565b620008e781620008c8565b82525050565b6000602082019050620009046000830184620008dc565b92915050565b6200091581620008c8565b81146200092157600080fd5b50565b60008135905062000935816200090a565b92915050565b60006200094882620008a8565b9050919050565b6200095a816200093b565b81146200096657600080fd5b50565b6000813590506200097a816200094f565b92915050565b6000806000606084860312156200099c576200099b620006eb565b5b6000620009ac8682870162000924565b9350506020620009bf8682870162000969565b925050604084013567ffffffffffffffff811115620009e357620009e2620006f0565b5b620009f18682870162000824565b9150509250925092565b6000819050919050565b62000a1081620009fb565b82525050565b600060208201905062000a2d600083018462000a05565b92915050565b62000a3e81620009fb565b811462000a4a57600080fd5b50565b60008135905062000a5e8162000a33565b92915050565b60006020828403121562000a7d5762000a7c620006eb565b5b600062000a8d8482850162000a4d565b91505092915050565b6000819050919050565b600062000ac162000abb62000ab584620008a8565b62000a96565b620008a8565b9050919050565b600062000ad58262000aa0565b9050919050565b600062000ae98262000ac8565b9050919050565b62000afb8162000adc565b82525050565b600060208201905062000b18600083018462000af0565b92915050565b600081519050919050565b600081905092915050565b60005b8381101562000b5457808201518184015260208101905062000b37565b60008484015250505050565b600062000b6d8262000b1e565b62000b79818562000b29565b935062000b8b81856020860162000b34565b80840191505092915050565b600062000ba5828462000b60565b915081905092915050565b600082825260208201905092915050565b7f42616e6b206e6f7420666f756e64000000000000000000000000000000000000600082015250565b600062000bf9600e8362000bb0565b915062000c068262000bc1565b602082019050919050565b6000602082019050818103600083015262000c2c8162000bea565b9050919050565b62000c3e816200093b565b82525050565b600062000c518262000b1e565b62000c5d818562000bb0565b935062000c6f81856020860162000b34565b62000c7a81620006ff565b840191505092915050565b600060608201905062000c9c6000830186620008dc565b62000cab602083018562000c33565b818103604083015262000cbf818462000c44565b9050949350505050565b6000602082019050818103600083015262000ce5818462000c44565b905092915050565b60008151905062000cfe8162000a33565b92915050565b60006020828403121562000d1d5762000d1c620006eb565b5b600062000d2d8482850162000ced565b9150509291505056fe60806040523480156200001157600080fd5b5060405162000eb238038062000eb2833981810160405281019062000037919062000318565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060029081620000c99190620005de565b506000600381905550505050620006c5565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011c82620000ef565b9050919050565b6200012e816200010f565b81146200013a57600080fd5b50565b6000815190506200014e8162000123565b92915050565b60006200016182620000ef565b9050919050565b620001738162000154565b81146200017f57600080fd5b50565b600081519050620001938162000168565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001ee82620001a3565b810181811067ffffffffffffffff8211171562000210576200020f620001b4565b5b80604052505050565b600062000225620000db565b9050620002338282620001e3565b919050565b600067ffffffffffffffff821115620002565762000255620001b4565b5b6200026182620001a3565b9050602081019050919050565b60005b838110156200028e57808201518184015260208101905062000271565b60008484015250505050565b6000620002b1620002ab8462000238565b62000219565b905082815260208101848484011115620002d057620002cf6200019e565b5b620002dd8482856200026e565b509392505050565b600082601f830112620002fd57620002fc62000199565b5b81516200030f8482602086016200029a565b91505092915050565b600080600060608486031215620003345762000333620000e5565b5b600062000344868287016200013d565b9350506020620003578682870162000182565b925050604084015167ffffffffffffffff8111156200037b576200037a620000ea565b5b6200038986828701620002e5565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003e657607f821691505b602082108103620003fc57620003fb6200039e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000427565b62000472868362000427565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004bf620004b9620004b3846200048a565b62000494565b6200048a565b9050919050565b6000819050919050565b620004db836200049e565b620004f3620004ea82620004c6565b84845462000434565b825550505050565b600090565b6200050a620004fb565b62000517818484620004d0565b505050565b5b818110156200053f576200053360008262000500565b6001810190506200051d565b5050565b601f8211156200058e57620005588162000402565b620005638462000417565b8101602085101562000573578190505b6200058b620005828562000417565b8301826200051c565b50505b505050565b600082821c905092915050565b6000620005b36000198460080262000593565b1980831691505092915050565b6000620005ce8383620005a0565b9150826002028217905092915050565b620005e98262000393565b67ffffffffffffffff811115620006055762000604620001b4565b5b620006118254620003cd565b6200061e82828562000543565b600060209050601f83116001811462000656576000841562000641578287015190505b6200064d8582620005c0565b865550620006bd565b601f198416620006668662000402565b60005b82811015620006905784890151825560018201915060208501945060208101905062000669565b86831015620006b05784890151620006ac601f891682620005a0565b8355505b6001600288020188555050505b505050505050565b6107dd80620006d56000396000f3fe6080604052600436106100555760003560e01c80634cb14f121461005a5780636833d54f146100855780638d68cf59146100c2578063a26759cb146100d9578063a99ba95c146100e3578063d0e30db01461010c575b600080fd5b34801561006657600080fd5b5061006f610116565b60405161007c91906103df565b60405180910390f35b34801561009157600080fd5b506100ac60048036038101906100a79190610554565b610120565b6040516100b991906105b8565b60405180910390f35b3480156100ce57600080fd5b506100d7610155565b005b6100e1610321565b005b3480156100ef57600080fd5b5061010a60048036038101906101059190610554565b61038a565b005b6101146103c4565b005b6000600354905090565b60006004826040516101329190610644565b908152602001604051809103902060009054906101000a900460ff169050919050565b60006003541161019a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610191906106b8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361022b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022290610724565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0cb34e106629dce34b632826bbba6b38e39c5957eb06a27e76efcc3d55da46b56003546040516102ac91906103df565b60405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003549081150290604051600060405180830381858888f1935050505015801561031e573d6000803e3d6000fd5b50565b34600360008282546103339190610773565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f8fe10ae416f22f5e5220b0018a6c1d4ff534d6aa3a471f2a20cb7747fe63e5b93460405161038091906103df565b60405180910390a2565b600160048260405161039c9190610644565b908152602001604051809103902060006101000a81548160ff02191690831515021790555050565b565b6000819050919050565b6103d9816103c6565b82525050565b60006020820190506103f460008301846103d0565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61046182610418565b810181811067ffffffffffffffff821117156104805761047f610429565b5b80604052505050565b60006104936103fa565b905061049f8282610458565b919050565b600067ffffffffffffffff8211156104bf576104be610429565b5b6104c882610418565b9050602081019050919050565b82818337600083830152505050565b60006104f76104f2846104a4565b610489565b90508281526020810184848401111561051357610512610413565b5b61051e8482856104d5565b509392505050565b600082601f83011261053b5761053a61040e565b5b813561054b8482602086016104e4565b91505092915050565b60006020828403121561056a57610569610404565b5b600082013567ffffffffffffffff81111561058857610587610409565b5b61059484828501610526565b91505092915050565b60008115159050919050565b6105b28161059d565b82525050565b60006020820190506105cd60008301846105a9565b92915050565b600081519050919050565b600081905092915050565b60005b838110156106075780820151818401526020810190506105ec565b60008484015250505050565b600061061e826105d3565b61062881856105de565b93506106388185602086016105e9565b80840191505092915050565b60006106508284610613565b915081905092915050565b600082825260208201905092915050565b7f4e6f2066756e647320617661696c61626c6520746f2073656e64000000000000600082015250565b60006106a2601a8361065b565b91506106ad8261066c565b602082019050919050565b600060208201905081810360008301526106d181610695565b9050919050565b7f496e76616c696420726563656976657220616464726573730000000000000000600082015250565b600061070e60188361065b565b9150610719826106d8565b602082019050919050565b6000602082019050818103600083015261073d81610701565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061077e826103c6565b9150610789836103c6565b92508282019050808211156107a1576107a0610744565b5b9291505056fea2646970667358221220399576eefea7650f330c43a26779adcc001fab651381d663e9b773a46e8466db64736f6c63430008110033a2646970667358221220cbb3bec961d5213cb39578b16e5a0e04b528ad5b535a5ff733015d7e8eb5233f64736f6c63430008110033";

    public static final String FUNC_LIST_OF_BANKS = "list_of_banks";

    public static final String FUNC_CREATEBANK = "createBank";

    public static final String FUNC_GETBANKADDRESS = "getBankAddress";

    public static final String FUNC_GETBANKDETAILS = "getBankDetails";

    public static final String FUNC_SENDFUNDS = "sendFunds";

    public static final Event MYCONTRACTCREATED_EVENT = new Event("MyContractCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0xd78f053BB2c8cAca51844398b01F769b46212322");
    }

    @Deprecated
    protected BankFactory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BankFactory(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected BankFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected BankFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<MyContractCreatedEventResponse> getMyContractCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MYCONTRACTCREATED_EVENT, transactionReceipt);
        ArrayList<MyContractCreatedEventResponse> responses = new ArrayList<MyContractCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MyContractCreatedEventResponse typedResponse = new MyContractCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MyContractCreatedEventResponse> myContractCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MyContractCreatedEventResponse>() {
            @Override
            public MyContractCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MYCONTRACTCREATED_EVENT, log);
                MyContractCreatedEventResponse typedResponse = new MyContractCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.newContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MyContractCreatedEventResponse> myContractCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MYCONTRACTCREATED_EVENT));
        return myContractCreatedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> list_of_banks(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LIST_OF_BANKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createBank(String _owner, String _receiver, String _uniqueId, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEBANK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_receiver), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> getBankAddress(String uniqueId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBANKADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uniqueId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getBankDetails(String _uniqueId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBANKDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> sendFunds(String _uniqueId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SENDFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static BankFactory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new BankFactory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static BankFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BankFactory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static BankFactory load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new BankFactory(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static BankFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new BankFactory(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<BankFactory> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BankFactory.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BankFactory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BankFactory.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<BankFactory> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BankFactory.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BankFactory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BankFactory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class MyContractCreatedEventResponse extends BaseEventResponse {
        public String newContract;
    }
}
